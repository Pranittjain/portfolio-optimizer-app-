# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D3GKQzT3bNgufWxFKO_6p2r_NeVktBSZ
"""

import streamlit as st
import pandas as pd
from backend import *

# -------------------------
# Title + Introduction
# -------------------------
st.set_page_config(page_title="Smart Portfolio Optimizer", layout="wide")
st.title("📊 Smart Portfolio Optimizer for Indian Stocks")

st.markdown("""
Welcome to the **Smart Portfolio Optimizer**! 🚀

- 📌 Select Indian stocks (Nifty 50) to build your custom portfolio
- 📈 See optimized weights, performance metrics & visual charts
- 🛡️ Stress test your portfolio across historical events like COVID-19


""")

st.divider()

# -------------------------
# Stock Selection
# -------------------------
st.header("🔎 Step 1: Select Stocks")

nifty_50_list = ['RELIANCE.NS', 'TCS.NS', 'INFY.NS', 'HDFCBANK.NS', 'LT.NS', 'ICICIBANK.NS', 'ITC.NS', 'KOTAKBANK.NS', 'SBIN.NS', 'AXISBANK.NS', 'HINDUNILVR.NS']

selected_tickers = st.multiselect(
    "Choose 3 to 8 stocks from the Nifty 50:",
    options=nifty_50_list,
    default=['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS']
)

# Cap the number of selections
if len(selected_tickers) < 3 or len(selected_tickers) > 8:
    st.warning("Please select between 3 to 8 stocks to proceed.")
    st.stop()

# -------------------------
# Optimization
# -------------------------

st.header("🧮 Step 2: Portfolio Optimization")
risk_free_rate = 0.04

data = get_data(selected_tickers, period="3y")
annual_returns = calculate_annual_returns(data)
cov_matrix = calculate_cov_matrix(data)
optimal_weights = optimize_portfolio(annual_returns, cov_matrix, risk_free_rate)
opt_ret, opt_vol, opt_sharpe = calculate_portfolio_metrics(annual_returns, optimal_weights, cov_matrix, risk_free_rate)

# Show Weights
st.subheader("📊 Optimized Portfolio Weights")
fig_weights = plot_weights_pie(selected_tickers, optimal_weights)
st.pyplot(fig_weights)

# Show Cumulative Chart
st.subheader("📈 Performance vs Nifty 50")
fig_compare = Nifty50_vs_optimized_Portfolio(selected_tickers, optimal_weights)
st.pyplot(fig_compare)

# Metrics
st.markdown(f"""
- ✅ **Annual Return:** {opt_ret:.2%}
- 📉 **Volatility:** {opt_vol:.2%}
- 🏆 **Sharpe Ratio:** {opt_sharpe:.2f}

*This portfolio is optimized to maximize the Sharpe Ratio using historical data.*
""")

# -------------------------
# Stress Testing
# -------------------------

st.divider()
st.header("⚠️ Optional: Stress Test Your Portfolio")

stress_periods = {
    "COVID-19 Crash (2020)": ("2020-02-01", "2020-04-30"),
    "Russia-Ukraine War (2022)": ("2022-02-01", "2022-04-30"),
    "2022 Tech Selloff": ("2022-01-01", "2022-06-30")
}

selected_stress = st.selectbox("Choose a historical crisis to simulate:", list(stress_periods.keys()))

start_date, end_date = stress_periods[selected_stress]
stress_ret, stress_vol = run_stress_test(selected_tickers, start_date, end_date, optimal_weights)

st.subheader(f"📉 Stress Test Results – {selected_stress}")
st.markdown(f"""
- 🔻 **Portfolio Return:** {stress_ret:.2%}
- 📉 **Volatility during stress:** {stress_vol:.2%}
""")

fig_stress = Nifty50_vs_stress_Portfolio(selected_tickers, start_date, end_date, optimal_weights)
st.pyplot(fig_stress)

st.info("Stress testing helps you understand how your portfolio might behave during market shocks.")

# -------------------------
# Footer / Education
# -------------------------

st.divider()
st.markdown("""
📘 *How this works:* This app uses Python + Streamlit + yFinance to pull real stock data and run portfolio optimization using the Sharpe Ratio.
Your selected stocks are optimized using scipy.optimize to maximize return per unit risk.

""")
