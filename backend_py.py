# -*- coding: utf-8 -*-
"""backend.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8nNry2aOo9iyYOHEiY3W249zlI9lvvB
"""

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import minimize
def get_data(tickers, period=None, start=None, end=None):
    data = yf.download(tickers=tickers, period=period, start=start, end=end)["Close"]
    data = data.dropna(axis=1, how='all')  # drop tickers with no data at all
    data = data.fillna(method='ffill').fillna(method='bfill')  # fill gaps
    return data

def calculate_annual_returns(data):
  annual_returns=data.pct_change().mean()*252
  return annual_returns
def calculate_cov_matrix(data):
  cov_matrix=data.pct_change().cov()*252
  return cov_matrix
def calculate_negative_sharpe_ratio(weights,annual_returns,cov_matrix,risk_free_return):
  portfolio_return=np.sum(annual_returns*weights)
  portfolio_volatility=np.sqrt(np.dot(weights.T,np.dot(cov_matrix,weights)))
  negative_sharpe_ratio=(portfolio_return-risk_free_return)/portfolio_volatility
  return -negative_sharpe_ratio
def optimize_portfolio(annual_returns,cov_matrix,risk_free_return):
  num_assets=len(annual_returns)
  args=(annual_returns,cov_matrix,risk_free_return)
  constraints={'type':'eq','fun':lambda x:np.sum(x)-1}
  bounds=[(0.05,1)]*num_assets
  starting_weights=[1/num_assets]*num_assets
  optimized=minimize(calculate_negative_sharpe_ratio,starting_weights,args=args,method='SLSQP',bounds=bounds,constraints=constraints)
  optimized_weights=optimized.x
  return optimized_weights
def calculate_portfolio_metrics(annual_returns,optimized_weights,cov_matrix,risk_free_return):
  opt_portfolio_return=np.dot(annual_returns,optimized_weights)
  opt_portfolio_volatility=np.sqrt(np.dot(optimized_weights.T,np.dot(cov_matrix,optimized_weights)))
  opt_portfolio_sharpe=(opt_portfolio_return-risk_free_return)/opt_portfolio_volatility
  return opt_portfolio_return,opt_portfolio_volatility,opt_portfolio_sharpe
def run_stress_test(tickers, start_date, end_date, optimal_weights):
    stress_data = get_data(tickers, start=start_date, end=end_date)
    stress_returns = stress_data.pct_change().dropna()
    portfolio_daily_returns = stress_returns.dot(optimal_weights)
    stress_portfolio_return = (1 + portfolio_daily_returns).prod() - 1
    stress_portfolio_volatility = portfolio_daily_returns.std() * np.sqrt(252)
    return stress_portfolio_return, stress_portfolio_volatility
def Nifty50_vs_optimized_Portfolio(tickers, optimal_weights):
    # Get data
    nifty50_data = get_data('^NSEI', period='3y')
    stock_data = get_data(tickers, period='3y')

    # Calculate returns
    nifty50_daily = nifty50_data.pct_change().dropna()
    nifty50_cumulative = (1 + nifty50_daily).cumprod()

    stock_daily = stock_data.pct_change().dropna()
    portfolio_daily_returns = stock_daily.dot(optimal_weights)
    portfolio_cumulative = (1 + portfolio_daily_returns).cumprod()

    # Plot
    fig, ax = plt.subplots(figsize=(10,6))
    ax.plot(nifty50_cumulative, label='Nifty 50 Index', linewidth=2, color='red')
    ax.plot(portfolio_cumulative, label='Optimized Portfolio', linewidth=2, color='blue')
    ax.set_xlabel("Date")
    ax.set_ylabel("Cumulative Returns")
    ax.set_title("Nifty 50 vs Optimized Portfolio (3 Years)")
    ax.legend()
    ax.grid(True)

    return fig
def Nifty50_vs_stress_Portfolio(tickers,start_date,end_date,optimal_weights):
    nifty50_data = get_data('^NSEI', start=start_date, end=end_date)
    nifty50_daily = nifty50_data.pct_change().dropna()
    nifty50_cumulative = (1 + nifty50_daily).cumprod()
    stress_data = get_data(tickers, start=start_date, end=end_date)
    stress_returns = stress_data.pct_change().dropna()
    portfolio_daily_returns = stress_returns.dot(optimal_weights)
    stress_portfolio_return = (1 + portfolio_daily_returns).prod()
    fig,ax=plt.subplots(figsize=(10,6))
    ax.plot(nifty50_cumulative, label='Nifty 50 Index', linewidth=2, color='red')
    ax.plot(stress_portfolio_return, label='Stress Portfolio', linewidth=2, color='blue')
    ax.set_xlabel("Date")
    ax.set_ylabel("Cumulative Returns")
    ax.set_title("Nifty 50 vs Stress Portfolio (3 Years)")
    ax.legend()
    ax.grid(True)
    return fig
def plot_weights_pie(tickers, weights):
    fig, ax = plt.subplots()
    ax.pie(weights, labels=tickers, autopct='%1.1f%%', startangle=140)
    ax.set_title("Portfolio Weights")
    return fig

